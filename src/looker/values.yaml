# Default values for looker
# This is a YAML-formatted file.

config:
  # -- name of the user who performs setup and support tasks
  firstName: Harness
  # -- last name of the user who performs setup and support tasks
  lastName: Support
  # -- email address of the support user, required for initial signup and support
  email: 'harnessSupport@harness.io'
  # -- timescale connection name, must match model connection name
  timescaleConnectionName: 'smp-timescale'
  # -- timescale hostname
  timescaleHost: 'timescaledb-single-chart.harness'
  # -- timescale port
  timescalePort: '5432'
  # -- timescale database name
  timescaleDatabase: 'harness'
  # -- timescale user
  timescaleUser: 'postgres'
  # -- timescale connection name for feature flags, must match model connection name
  ffConnectionName: 'smp-timescale-cf'
  # -- timescale database name for feature flags
  ffDatabase: 'harness_ff'
  # -- postgres connection name for STO, must match model connection name
  stoConnectionName: 'smp-postgres'
  # -- postgres database name for STO
  stoDatabase: 'harness_sto'
  # -- clickhouse connection name for CCM, must match model connection name
  clickhouseConnectionName: smp-clickhouse
  # -- clickhouse hostname
  clickhouseHost: 'clickhouse'
  # -- clickhouse port
  clickhousePort: '8123'
  # -- clickhouse database name
  clickhouseDatabase: 'ccm'
  # -- clickhouse user
  clickhouseUser: 'default'
  # -- name of the looker project which will be created
  projectName: 'Harness'

mysql:
  enabled: false
  host: looker-mysql
  user: looker
  database: looker
  port: '3306'

mysqlSecrets:
  password:
    root:
      name: looker-mysql-secrets
      # -- name of secret containing the mysql root password
      key: lookerMySqlRootPassword
    user:
      name: looker-mysql-secrets
      # -- name of secret containing the mysql looker user password
      key: lookerMySqlUserPassword

lookerSecrets:
  licenseKey:
    name: looker-secrets
    # -- name of secret containing the looker license key which will be provided by Harness
    key: lookerLicenseKey
  masterKey:
    name: looker-secrets
    # -- name of secret containing the key used for at rest encryption by looker, generate a Base64, 32-byte key, e.g. openssl rand -base64 32
    key: lookerMasterKey
  clientId:
    name: harness-looker-secrets
    # -- name of secret containing the id used for API authentication, generate a 20-byte key, e.g. openssl rand -hex 10
    key: lookerClientId
  clientSecret:
    name: harness-looker-secrets
    # -- name of secret containing the client secret used for API authentication, generate a 24-byte key, e.g. openssl rand -hex 12
    key: lookerClientSecret

timescaleSecrets:
  password:
    name: harness-secrets
    # -- name of secret containing the timescale password
    key: timescaledbPostgresPassword

clickhouseSecrets:
  password:
    name: clickhouse
    # -- name of secret containing the clickhouse password
    key: admin-password

ingress:
  # -- Required if ingress is enabled, Looker requires a separate DNS domain name to function
  hosts: []
  tls:
    secretName: ''

persistentVolume:
  accessMode: ReadWriteOnce
  storage:
    # -- size of volume where Looker stores model files
    models: 2Gi
    # -- size of volume where Looker stores database
    database: 20Gi

# -- directory where Looker models volume will be mounted
modelsDirectory: /mnt/lookerfiles

global:
  loadbalancerURL: ""
  airgap: "false"
  ha: false
  storageClassName:
  ingress:
    enabled: false
    className: ''
    tls:
      enabled: false
  istio:
    enabled: false
    gateway:
      create: false
    hosts:
      - '*'
    virtualService:
      # Unused if gateway.create is enabled
      gateways:
        - "someGateway"
      hosts:
        - "myhostname.example.com"
  imagePullSecrets: []
maxSurge: 1
maxUnavailable: 0

# looker overrides for istio, if different host and gateway is used is given
istio:
  gateway:
    # enable to create looker gateway
    create: false
    port: 443
    protocol: HTTPS
  hosts:
      - '*'
  tls:
    credentialName: harness-cert
    minProtocolVersion: TLSV1_2
    mode: SIMPLE
  virtualService:
    # enable to set specific looker host
    enabled: false
    # -- Required if istio is enabled, Looker requires a separate DNS domain name to function
    hosts:
    - 'myhostname.example.com'

image:
  registry: docker.io
  repository: harness/looker-signed
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "23.8.42.0"
  digest: ""
  imagePullSecrets: []

  mysql:
    registry: docker.io
    repository: harness/mysql
    tag: "enterprise-server-8.0.32"
    imagePullSecrets: []

secrets:
  # -- Required: Looker license key
  lookerLicenseKey: "ZW52U3BlY2lmaWM="
  lookerMasterKey: ""
  lookerClientId: ""
  lookerClientSecret: ""
  lookerEmbedSecret: ""
  lookerSignupUrl: ""
  lookerMySqlUserPassword: ""
  lookerMySqlRootPassword: ""

waitForInitContainer:
  image:
    registry: docker.io
    repository: ubuntu
    pullPolicy: IfNotPresent
    tag: "20.04"
    digest: ""
    imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "harness-looker"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  runAsUser: 1001
  runAsNonRoot: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port:
    web: 9999
    api: 19999

resources:
  limits:
    cpu: 4
    # -- minimum of 6GiB recommended
    memory: 8192Mi
  requests:
    cpu: 2
    memory: 4096Mi

nodeSelector: {}

tolerations: []

affinity: {}

# extraVolumes:
#   - name: volume-test
#     configMap:
#       name: test-config
#       # readOnly: true
extraVolumes: []

# extraVolumeMounts:
#   - name: volume-test
#     mountPath: /opt/harness/config
extraVolumeMounts: []

lifecycleHooks:
  postStart:
    exec:
      command:
  preStop:
    exec:
      command: